#!/usr/bin/env python3
"""
Script completo para demostrar el Sistema de Tutorial Inteligente
Inicia la API y ejecuta pruebas autom√°ticamente
"""

import subprocess
import time
import requests
import json
from datetime import datetime

def wait_for_api():
    """Esperar a que la API est√© lista"""
    print("‚è≥ Esperando a que la API est√© lista...")
    max_attempts = 30
    for attempt in range(max_attempts):
        try:
            response = requests.get("http://localhost:8000/health", timeout=2)
            if response.status_code == 200:
                print("‚úÖ API lista!")
                return True
        except:
            pass
        time.sleep(1)
        if attempt % 5 == 0:
            print(f"   Intento {attempt + 1}/{max_attempts}...")
    
    print("‚ùå La API no se inici√≥ correctamente")
    return False

def run_demo():
    """Ejecutar demostraci√≥n completa"""
    
    print("üöÄ DEMOSTRACI√ìN COMPLETA DEL SISTEMA DE TUTORIAL INTELIGENTE")
    print("=" * 70)
    
    # 1. Ejecutar demostraci√≥n del motor
    print("\n1Ô∏è‚É£ Ejecutando demostraci√≥n del motor de tutorial...")
    try:
        result = subprocess.run(["python3", "simple_demo.py"], 
                              capture_output=True, text=True, timeout=30)
        if result.returncode == 0:
            print("‚úÖ Demostraci√≥n del motor completada")
            # Mostrar parte de la salida
            lines = result.stdout.split('\n')
            for line in lines[:10]:  # Mostrar primeras 10 l√≠neas
                if line.strip():
                    print(f"   {line}")
        else:
            print(f"‚ùå Error en demostraci√≥n: {result.stderr}")
    except Exception as e:
        print(f"‚ùå Error ejecutando demostraci√≥n: {e}")
    
    # 2. Iniciar API en segundo plano
    print("\n2Ô∏è‚É£ Iniciando API del sistema...")
    try:
        api_process = subprocess.Popen(["python3", "simple_api.py"], 
                                     stdout=subprocess.PIPE, 
                                     stderr=subprocess.PIPE)
        print("‚úÖ API iniciada en segundo plano")
        
        # Esperar a que la API est√© lista
        if not wait_for_api():
            api_process.terminate()
            return
        
        # 3. Ejecutar pruebas de la API
        print("\n3Ô∏è‚É£ Ejecutando pruebas de la API...")
        result = subprocess.run(["python3", "test_api.py"], 
                              capture_output=True, text=True, timeout=60)
        if result.returncode == 0:
            print("‚úÖ Pruebas de API completadas")
            # Mostrar parte de la salida
            lines = result.stdout.split('\n')
            for line in lines:
                if line.strip() and ("‚úÖ" in line or "‚ùå" in line or "‚ÑπÔ∏è" in line):
                    print(f"   {line}")
        else:
            print(f"‚ùå Error en pruebas: {result.stderr}")
        
        # 4. Mostrar informaci√≥n final
        print("\n4Ô∏è‚É£ Informaci√≥n final del sistema...")
        try:
            response = requests.get("http://localhost:8000/")
            if response.status_code == 200:
                data = response.json()
                print(f"‚úÖ API funcionando: {data['message']}")
                print(f"   - Versi√≥n: {data['version']}")
                print(f"   - Endpoints: {len(data['endpoints'])}")
            
            response = requests.get("http://localhost:8000/health")
            if response.status_code == 200:
                data = response.json()
                print(f"   - Jugadores: {data['players_registered']}")
                print(f"   - Sesiones: {data['active_sessions']}")
        except Exception as e:
            print(f"‚ùå Error obteniendo informaci√≥n: {e}")
        
        # Terminar API
        api_process.terminate()
        print("\n‚úÖ API terminada")
        
    except Exception as e:
        print(f"‚ùå Error iniciando API: {e}")
    
    print("\nüéâ Demostraci√≥n completada!")
    print("=" * 70)
    print("\nüìã RESUMEN DE LO QUE VISTE:")
    print("1. Motor de tutorial inteligente funcionando")
    print("2. API REST completa con FastAPI")
    print("3. Generaci√≥n de tutoriales adaptativos")
    print("4. An√°lisis de comportamiento del jugador")
    print("5. Feedback en tiempo real")
    print("6. Sistema de recomendaciones personalizadas")
    print("\nüîó Para usar la API completa:")
    print("   - Ejecuta: python3 simple_api.py")
    print("   - Visita: http://localhost:8000/docs")
    print("   - Prueba los endpoints manualmente")

if __name__ == "__main__":
    run_demo() 